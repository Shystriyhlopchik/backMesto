class Api {
  constructor(options) {
    this.url = options.url;
    this.headers = options.headers;
  }

  // запрос информации 
  get(path) {
    return fetch(`${this.url}${path}`, {
      headers: this.headers
    })
      .then(this.checkStatus)
      .catch(this.showError);
  }

  // обновление информации пользователя
  updateInfo(path, fields) {
    const [input1, input2] = fields;
    return fetch(`${this.url}${path}`, {
      method: 'PATCH',
      headers: this.headers,
      body: JSON.stringify({
        name: input1.value,
        about: input2.value
      })
    })
      .then(this.checkStatus)
      .catch(this.showError);
  }

  // добавление новой карточки на сервер
  postCard(path, fields) {
    const [input1, input2] = fields;
    return fetch(`${this.url}${path}`, {
      method: 'POST',
      headers: this.headers,
      body: JSON.stringify({
        name: input1.value,
        link: input2.value
      })
    })
      .then(this.checkStatus)
      .catch(this.showError);
  }

  //проверка статуса ответа от сервера
  checkStatus(res) {
    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);
  }

  // отобразить в консоли ошибку
  showError(err) {
    return console.log(err);
  }
}

 /**
 * Здравствуйте. Отличная работа, но я бы сюда перенёс finally
 * --------------------------------------------------------------------
 * Весь функционал работает корректно 
 * Код чистый и хорошо читается 
 * Вы используете логические группировки операций 
 * У вас нет дублирование кода
 *  Вы не используете небезопасный innerHtml
 *  Вы используете делегирование
 * --------------------------------------------------------------------
    
  * можно лучше: избегайте сложных условий и большой вложенности в условии. Чем сложнее условие, чем больше
  * вложенности в условии, тем сложнее анализировать код, сложнее искать ошибки и поддерживать такой код
  * самый простой вариант это убирать условия или блок в условии в отдельную функцию
 *
 * можно лучше: Старайтесь не объявлять большое количество переменных. Чем больше переменных, тем сложнее понимать за что они 
 * отвечают и какую полезную нагрузку несут в коде. Лучше инкапсулировать(прятать) переменные в функциях. 
 * В будущем вам проще будет искать ошибки и разбираться в сложных взаимосвязях
 *
 * 	
   * Класс Api это отдельный класс который ничего не знает о других классах и методах
   * Вы можете только получать данные из этого класса и использовать эти данные.
   * Представьте, что я дам Вам другой класс(допустим DataBase) к внутренностям которого вы не будете иметь доступ и даже прочитать этот файл не сможете
   * скажу что у него есть несколько методов  getInitialCards deleteCard addCard, editUserInfo, setUserInfo и так далее
   * Который только возвращает данные, а вы можите получить только обращась к этим методам.
   * Соответственно в классе нельзя реализовать такие методы как querySelector или обратиться к другому классу, а только обратитьсяк методам.
   * Отдельная обязанность. Таким же способом Вы обращаетесь к серверу. Вы не знаете, что на сервере, даже язык программирования, но вы знаете методы
   * к которым обращаетесь и способ обращения. Это и есть обязанность отдельного класса.
   *
 * 
 * 
 */